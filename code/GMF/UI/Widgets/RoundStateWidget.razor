@using Sandbox;
@using Sandbox.UI;
@using static UI_Colours;
@inherits PanelComponent

<root>
    <div class="container">
        <div class="title">
            <div class="title">@GetGameState()</div>
		</div>
		<div class="content tabs-container">
            @foreach (Connection entry in Connection.All)
            {
				var playerInfo = PlayerInfo.FromConnection(entry);
				if (playerInfo == null)
					continue;

				var borderColor = PlayerToColour(playerInfo);
				if (IsFullyValid(GameMode.instance) && GameMode.instance.modeState == ModeState.ActiveRound)
				{ 
				}
				if (isActiveRound && playerInfo.isDead)
				{
					borderColor = DEAD;
				}
				<div class="card" style="background-color: @borderColor;">
					<div class="avatar" style="background-image: url(avatar:@entry.SteamId)">
						@if (isActiveRound && playerInfo.isDead)
						{
							<div class="skull" style="background-image: url(ui/skull_filled.png)"></div>
						}
					</div>
					
                </div>
            }
		</div>
		<div class="subtitle">
			<div class="subtitle">@GetRoundCountTime()</div>
		</div>
		<!-- Lol I need this to push the cards to the top, IDK what I'm doing-->
		<div class="content tab-content" CanDragScroll="false">
		</div>
    </div>

</root>

@code
{
	[Property] public int lastCountdownNumber { get; set; } = -1;

	public bool isActiveRound
	{
		get 
		{
			if (!IsFullyValid(GameMode.instance))
				return false;

			if (GameMode.instance.modeState != ModeState.ActiveRound &&
				GameMode.instance.modeState != ModeState.PostRound)
				return false;

			return true;
		}
	}

	string GetGameState()
	{
		if (!IsFullyValid(GameMode.instance))
		{
			return "";
		}

		if (GameMode.instance.modeState == ModeState.WaitingForPlayers)
		{
			return "Waiting For Players";
		}

		if (GameMode.instance.modeState == ModeState.ReadyPhase)
		{
			return "Get Ready";
		}

		if (GameMode.instance.modeState == ModeState.ActiveRound)
		{
			return FormatTime(GameMode.instance.remainingStateTime);
		}

		return "";
	}

	string FormatTime(float timeInSeconds)
	{
		int minutes = (int)(timeInSeconds / 60);
		int seconds = (int)(timeInSeconds % 60);

		string formattedTime = string.Format("{0}:{1:D2}", minutes, seconds);
		return formattedTime;
	}

	string GetRoundCountTime()
	{
		if (GameMode.instance == null)
		{
			return "";
		}

		if (GameMode.instance.modeState != ModeState.ReadyPhase)
		{
			return "";
		}

		this.Dirty();

		var remainingStateTime = GameMode.instance.remainingStateTime;
		var rounded = MathX.CeilToInt(remainingStateTime);

		if (lastCountdownNumber != rounded)
		{
			Sound.Play("ui.countdown");
		}
		lastCountdownNumber = rounded;

		return rounded.ToString();
	}

	//protected override int BuildHash() => System.HashCode.Combine(RealTime.Now.CeilToInt() + this.GetDirty());
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now.CeilToInt(), this.GetDirty(), GameMode.instance.modeState);
}
