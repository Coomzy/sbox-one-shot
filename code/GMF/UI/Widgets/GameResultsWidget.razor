@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Utility;
@using Sandbox.Audio;
@using System;
@using static UI_Colours;
@inherits PanelComponent

<root>
	<div class="container">
		<div class="title" style="font-size: 100px;">Game Over</div>
		@{
			int count = 0;
			@foreach (var osPlayerInfo in playersOrdered)
			{
				float pct = count / (float)entries.Length;
				float fontSize = fontSizeRemap.Evaluate(pct);
				var borderColor = PlayerToColour(osPlayerInfo);

				var position = "";
				if (count < entries.Length)
				{
					position = entries[count];
				}
				else
				{
					position = $"{count}.";
				}

				var delay = slideDelay + (count * slideDelayPerEntry);
				var startTime = timeSinceShown;
				var targetSlideTime = slideTime + delay;

				var slideTimeLerp = MathY.InverseLerp(delay, targetSlideTime, startTime);
				slideTimeLerp = EasingY.OutBack(slideTimeLerp);
				var posY = MathY.LerpUnclamped(1000.0f, 0.0f, slideTimeLerp);

				<div class="entry" style="font-size: @fontSize; color: @borderColor; transform: translateY(@posY);">@position @osPlayerInfo?.displayName</div>

				count++;
			}
		}
	</div>
</root>

@code
{
	[Group("Config"), Property] public float slideTime { get; set; } = 0.45f;
	[Group("Config"), Property] public float slideDelay { get; set; } = 0.5f;
	[Group("Config"), Property] public float slideDelayPerEntry { get; set; } = 0.15f;
	[Group("Config"), Property] public Remap fontSizeRemap { get; set; } = new Remap(0.0f, 1.0f, 35.0f, 10.0f);

	public string[] entries = new string[]
	{
		"1st.",
		"2nd.",
		"3rd.",
		"4th.",
		"5th.",
		"6th.",
		"7th.",
		"8th. ",
	};

	public List<PlayerInfo> playersOrdered { get; set; } = new();
	public TimeSince timeSinceShown { get; set; }

	protected override void OnStart()
	{
		Hide();
	}

	[Button]
	public void Show()
	{
		playersOrdered = GameMode.instance.SortPlayersByWinning(PlayerInfo.allActive);

		/*playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);
		playersOrdered.Add(PlayerInfo.local);*/

		SetClass("visible", true);
		SetClass("hidden", false);
		timeSinceShown = 0;
	}

	[Button]
	public void Hide()
	{
		SetClass("visible", false);
		SetClass("hidden", true);
	}

	public bool IsVisible()
	{
		return HasClass("visible");
	}

	protected override void OnUpdate()
	{
		bool shouldShow = false;// Input.Down(Inputs.score);
		if (GameMode.instance.modeState == ModeState.PostMatchResults)
		{
			shouldShow = true;
		}

		if (shouldShow != IsVisible())
		{
			if (shouldShow)
			{
				Show();
			}
			else
			{
				Hide();	
			}
		}


		if (!IsVisible())
			return;

		this.Dirty();
	}

	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now.CeilToInt() + this.GetDirty());
}